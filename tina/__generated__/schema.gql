# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  website(relativePath: String): Website!
  websiteConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: WebsiteFilter): WebsiteConnection!
  projets(relativePath: String): Projets!
  projetsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ProjetsFilter): ProjetsConnection!
  savoirfaire(relativePath: String): Savoirfaire!
  savoirfaireConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SavoirfaireFilter): SavoirfaireConnection!
  jobs(relativePath: String): Jobs!
  jobsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: JobsFilter): JobsConnection!
  equipes(relativePath: String): Equipes!
  equipesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: EquipesFilter): EquipesConnection!
}

input DocumentFilter {
  website: WebsiteFilter
  projets: ProjetsFilter
  savoirfaire: SavoirfaireFilter
  jobs: JobsFilter
  equipes: EquipesFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Website | Projets | Savoirfaire | Jobs | Equipes | Folder

type WebsiteColophon {
  design: String!
}

type WebsiteSeo {
  description: String!
}

type Website implements Node & Document {
  name: String!
  subname: String!
  colophon: WebsiteColophon
  seo: WebsiteSeo
  url: String!
  email: String!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input WebsiteColophonFilter {
  design: StringFilter
}

input WebsiteSeoFilter {
  description: StringFilter
}

input WebsiteFilter {
  name: StringFilter
  subname: StringFilter
  colophon: WebsiteColophonFilter
  seo: WebsiteSeoFilter
  url: StringFilter
  email: StringFilter
}

type WebsiteConnectionEdges {
  cursor: String!
  node: Website
}

type WebsiteConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [WebsiteConnectionEdges]
}

type ProjetsCover {
  src: String
  alt: String
}

type Projets implements Node & Document {
  titre: String!
  maitre_ouvrage: String
  typologie: String
  mission: String
  statut: String
  etat: String
  surface: Float
  ile: String
  localite: String
  coordonnees: String
  debut: String
  fin: String
  visible: Boolean
  cover: ProjetsCover
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ProjetsCoverFilter {
  src: ImageFilter
  alt: StringFilter
}

input ProjetsFilter {
  titre: StringFilter
  maitre_ouvrage: StringFilter
  typologie: StringFilter
  mission: StringFilter
  statut: StringFilter
  etat: StringFilter
  surface: NumberFilter
  ile: StringFilter
  localite: StringFilter
  coordonnees: StringFilter
  debut: DatetimeFilter
  fin: DatetimeFilter
  visible: BooleanFilter
  cover: ProjetsCoverFilter
}

type ProjetsConnectionEdges {
  cursor: String!
  node: Projets
}

type ProjetsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ProjetsConnectionEdges]
}

type Savoirfaire implements Node & Document {
  nom: String!
  description: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input SavoirfaireFilter {
  nom: StringFilter
  description: RichTextFilter
}

type SavoirfaireConnectionEdges {
  cursor: String!
  node: Savoirfaire
}

type SavoirfaireConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SavoirfaireConnectionEdges]
}

type Jobs implements Node & Document {
  titre: String!
  description: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input JobsFilter {
  titre: StringFilter
  description: RichTextFilter
}

type JobsConnectionEdges {
  cursor: String!
  node: Jobs
}

type JobsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [JobsConnectionEdges]
}

type EquipesAdresse {
  telephone: String
  mail: String
  postale: String
}

type Equipes implements Node & Document {
  nom: String!
  coordonnees: String
  adresse: EquipesAdresse
  siege: Boolean
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input EquipesAdresseFilter {
  telephone: StringFilter
  mail: StringFilter
  postale: StringFilter
}

input EquipesFilter {
  nom: StringFilter
  coordonnees: StringFilter
  adresse: EquipesAdresseFilter
  siege: BooleanFilter
}

type EquipesConnectionEdges {
  cursor: String!
  node: Equipes
}

type EquipesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [EquipesConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateWebsite(relativePath: String!, params: WebsiteMutation!): Website!
  createWebsite(relativePath: String!, params: WebsiteMutation!): Website!
  updateProjets(relativePath: String!, params: ProjetsMutation!): Projets!
  createProjets(relativePath: String!, params: ProjetsMutation!): Projets!
  updateSavoirfaire(relativePath: String!, params: SavoirfaireMutation!): Savoirfaire!
  createSavoirfaire(relativePath: String!, params: SavoirfaireMutation!): Savoirfaire!
  updateJobs(relativePath: String!, params: JobsMutation!): Jobs!
  createJobs(relativePath: String!, params: JobsMutation!): Jobs!
  updateEquipes(relativePath: String!, params: EquipesMutation!): Equipes!
  createEquipes(relativePath: String!, params: EquipesMutation!): Equipes!
}

input DocumentUpdateMutation {
  website: WebsiteMutation
  projets: ProjetsMutation
  savoirfaire: SavoirfaireMutation
  jobs: JobsMutation
  equipes: EquipesMutation
  relativePath: String
}

input DocumentMutation {
  website: WebsiteMutation
  projets: ProjetsMutation
  savoirfaire: SavoirfaireMutation
  jobs: JobsMutation
  equipes: EquipesMutation
}

input WebsiteColophonMutation {
  design: String
}

input WebsiteSeoMutation {
  description: String
}

input WebsiteMutation {
  name: String
  subname: String
  colophon: WebsiteColophonMutation
  seo: WebsiteSeoMutation
  url: String
  email: String
}

input ProjetsCoverMutation {
  src: String
  alt: String
}

input ProjetsMutation {
  titre: String
  maitre_ouvrage: String
  typologie: String
  mission: String
  statut: String
  etat: String
  surface: Float
  ile: String
  localite: String
  coordonnees: String
  debut: String
  fin: String
  visible: Boolean
  cover: ProjetsCoverMutation
}

input SavoirfaireMutation {
  nom: String
  description: JSON
}

input JobsMutation {
  titre: String
  description: JSON
}

input EquipesAdresseMutation {
  telephone: String
  mail: String
  postale: String
}

input EquipesMutation {
  nom: String
  coordonnees: String
  adresse: EquipesAdresseMutation
  siege: Boolean
}

schema {
  query: Query
  mutation: Mutation
}
