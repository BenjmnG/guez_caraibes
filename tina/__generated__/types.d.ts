//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String'];
  path: Scalars['String'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  id: Scalars['ID'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  website: Website;
  websiteConnection: WebsiteConnection;
  projets: Projets;
  projetsConnection: ProjetsConnection;
  savoirfaire: Savoirfaire;
  savoirfaireConnection: SavoirfaireConnection;
  jobs: Jobs;
  jobsConnection: JobsConnection;
  equipes: Equipes;
  equipesConnection: EquipesConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryWebsiteArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryWebsiteConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<WebsiteFilter>;
};


export type QueryProjetsArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryProjetsConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<ProjetsFilter>;
};


export type QuerySavoirfaireArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QuerySavoirfaireConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<SavoirfaireFilter>;
};


export type QueryJobsArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryJobsConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<JobsFilter>;
};


export type QueryEquipesArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryEquipesConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<EquipesFilter>;
};

export type DocumentFilter = {
  website?: InputMaybe<WebsiteFilter>;
  projets?: InputMaybe<ProjetsFilter>;
  savoirfaire?: InputMaybe<SavoirfaireFilter>;
  jobs?: InputMaybe<JobsFilter>;
  equipes?: InputMaybe<EquipesFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']>;
};

export type DocumentNode = Website | Projets | Savoirfaire | Jobs | Equipes | Folder;

export type WebsiteColophon = {
  __typename?: 'WebsiteColophon';
  design: Scalars['String'];
};

export type WebsiteSeo = {
  __typename?: 'WebsiteSeo';
  description: Scalars['String'];
};

export type Website = Node & Document & {
  __typename?: 'Website';
  name: Scalars['String'];
  subname: Scalars['String'];
  colophon?: Maybe<WebsiteColophon>;
  seo?: Maybe<WebsiteSeo>;
  url: Scalars['String'];
  email: Scalars['String'];
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type WebsiteColophonFilter = {
  design?: InputMaybe<StringFilter>;
};

export type WebsiteSeoFilter = {
  description?: InputMaybe<StringFilter>;
};

export type WebsiteFilter = {
  name?: InputMaybe<StringFilter>;
  subname?: InputMaybe<StringFilter>;
  colophon?: InputMaybe<WebsiteColophonFilter>;
  seo?: InputMaybe<WebsiteSeoFilter>;
  url?: InputMaybe<StringFilter>;
  email?: InputMaybe<StringFilter>;
};

export type WebsiteConnectionEdges = {
  __typename?: 'WebsiteConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Website>;
};

export type WebsiteConnection = Connection & {
  __typename?: 'WebsiteConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<WebsiteConnectionEdges>>>;
};

export type ProjetsCover = {
  __typename?: 'ProjetsCover';
  src?: Maybe<Scalars['String']>;
  alt?: Maybe<Scalars['String']>;
};

export type Projets = Node & Document & {
  __typename?: 'Projets';
  titre: Scalars['String'];
  maitre_ouvrage?: Maybe<Scalars['String']>;
  typologie?: Maybe<Scalars['String']>;
  mission?: Maybe<Scalars['String']>;
  statut?: Maybe<Scalars['String']>;
  etat?: Maybe<Scalars['String']>;
  surface?: Maybe<Scalars['Float']>;
  ile?: Maybe<Scalars['String']>;
  localite?: Maybe<Scalars['String']>;
  coordonnees?: Maybe<Scalars['String']>;
  debut?: Maybe<Scalars['String']>;
  fin?: Maybe<Scalars['String']>;
  visible?: Maybe<Scalars['Boolean']>;
  cover?: Maybe<ProjetsCover>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']>;
  lte?: InputMaybe<Scalars['Float']>;
  gte?: InputMaybe<Scalars['Float']>;
  gt?: InputMaybe<Scalars['Float']>;
  eq?: InputMaybe<Scalars['Float']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']>;
  exists?: InputMaybe<Scalars['Boolean']>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type ProjetsCoverFilter = {
  src?: InputMaybe<ImageFilter>;
  alt?: InputMaybe<StringFilter>;
};

export type ProjetsFilter = {
  titre?: InputMaybe<StringFilter>;
  maitre_ouvrage?: InputMaybe<StringFilter>;
  typologie?: InputMaybe<StringFilter>;
  mission?: InputMaybe<StringFilter>;
  statut?: InputMaybe<StringFilter>;
  etat?: InputMaybe<StringFilter>;
  surface?: InputMaybe<NumberFilter>;
  ile?: InputMaybe<StringFilter>;
  localite?: InputMaybe<StringFilter>;
  coordonnees?: InputMaybe<StringFilter>;
  debut?: InputMaybe<DatetimeFilter>;
  fin?: InputMaybe<DatetimeFilter>;
  visible?: InputMaybe<BooleanFilter>;
  cover?: InputMaybe<ProjetsCoverFilter>;
};

export type ProjetsConnectionEdges = {
  __typename?: 'ProjetsConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Projets>;
};

export type ProjetsConnection = Connection & {
  __typename?: 'ProjetsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<ProjetsConnectionEdges>>>;
};

export type Savoirfaire = Node & Document & {
  __typename?: 'Savoirfaire';
  nom: Scalars['String'];
  description?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
};

export type SavoirfaireFilter = {
  nom?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
};

export type SavoirfaireConnectionEdges = {
  __typename?: 'SavoirfaireConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Savoirfaire>;
};

export type SavoirfaireConnection = Connection & {
  __typename?: 'SavoirfaireConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<SavoirfaireConnectionEdges>>>;
};

export type Jobs = Node & Document & {
  __typename?: 'Jobs';
  titre: Scalars['String'];
  description?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type JobsFilter = {
  titre?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
};

export type JobsConnectionEdges = {
  __typename?: 'JobsConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Jobs>;
};

export type JobsConnection = Connection & {
  __typename?: 'JobsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<JobsConnectionEdges>>>;
};

export type EquipesAdresse = {
  __typename?: 'EquipesAdresse';
  telephone?: Maybe<Scalars['String']>;
  mail?: Maybe<Scalars['String']>;
  postale?: Maybe<Scalars['String']>;
};

export type Equipes = Node & Document & {
  __typename?: 'Equipes';
  nom: Scalars['String'];
  coordonnees?: Maybe<Scalars['String']>;
  adresse?: Maybe<EquipesAdresse>;
  siege?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type EquipesAdresseFilter = {
  telephone?: InputMaybe<StringFilter>;
  mail?: InputMaybe<StringFilter>;
  postale?: InputMaybe<StringFilter>;
};

export type EquipesFilter = {
  nom?: InputMaybe<StringFilter>;
  coordonnees?: InputMaybe<StringFilter>;
  adresse?: InputMaybe<EquipesAdresseFilter>;
  siege?: InputMaybe<BooleanFilter>;
};

export type EquipesConnectionEdges = {
  __typename?: 'EquipesConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Equipes>;
};

export type EquipesConnection = Connection & {
  __typename?: 'EquipesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<EquipesConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateWebsite: Website;
  createWebsite: Website;
  updateProjets: Projets;
  createProjets: Projets;
  updateSavoirfaire: Savoirfaire;
  createSavoirfaire: Savoirfaire;
  updateJobs: Jobs;
  createJobs: Jobs;
  updateEquipes: Equipes;
  createEquipes: Equipes;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateWebsiteArgs = {
  relativePath: Scalars['String'];
  params: WebsiteMutation;
};


export type MutationCreateWebsiteArgs = {
  relativePath: Scalars['String'];
  params: WebsiteMutation;
};


export type MutationUpdateProjetsArgs = {
  relativePath: Scalars['String'];
  params: ProjetsMutation;
};


export type MutationCreateProjetsArgs = {
  relativePath: Scalars['String'];
  params: ProjetsMutation;
};


export type MutationUpdateSavoirfaireArgs = {
  relativePath: Scalars['String'];
  params: SavoirfaireMutation;
};


export type MutationCreateSavoirfaireArgs = {
  relativePath: Scalars['String'];
  params: SavoirfaireMutation;
};


export type MutationUpdateJobsArgs = {
  relativePath: Scalars['String'];
  params: JobsMutation;
};


export type MutationCreateJobsArgs = {
  relativePath: Scalars['String'];
  params: JobsMutation;
};


export type MutationUpdateEquipesArgs = {
  relativePath: Scalars['String'];
  params: EquipesMutation;
};


export type MutationCreateEquipesArgs = {
  relativePath: Scalars['String'];
  params: EquipesMutation;
};

export type DocumentUpdateMutation = {
  website?: InputMaybe<WebsiteMutation>;
  projets?: InputMaybe<ProjetsMutation>;
  savoirfaire?: InputMaybe<SavoirfaireMutation>;
  jobs?: InputMaybe<JobsMutation>;
  equipes?: InputMaybe<EquipesMutation>;
  relativePath?: InputMaybe<Scalars['String']>;
};

export type DocumentMutation = {
  website?: InputMaybe<WebsiteMutation>;
  projets?: InputMaybe<ProjetsMutation>;
  savoirfaire?: InputMaybe<SavoirfaireMutation>;
  jobs?: InputMaybe<JobsMutation>;
  equipes?: InputMaybe<EquipesMutation>;
};

export type WebsiteColophonMutation = {
  design?: InputMaybe<Scalars['String']>;
};

export type WebsiteSeoMutation = {
  description?: InputMaybe<Scalars['String']>;
};

export type WebsiteMutation = {
  name?: InputMaybe<Scalars['String']>;
  subname?: InputMaybe<Scalars['String']>;
  colophon?: InputMaybe<WebsiteColophonMutation>;
  seo?: InputMaybe<WebsiteSeoMutation>;
  url?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
};

export type ProjetsCoverMutation = {
  src?: InputMaybe<Scalars['String']>;
  alt?: InputMaybe<Scalars['String']>;
};

export type ProjetsMutation = {
  titre?: InputMaybe<Scalars['String']>;
  maitre_ouvrage?: InputMaybe<Scalars['String']>;
  typologie?: InputMaybe<Scalars['String']>;
  mission?: InputMaybe<Scalars['String']>;
  statut?: InputMaybe<Scalars['String']>;
  etat?: InputMaybe<Scalars['String']>;
  surface?: InputMaybe<Scalars['Float']>;
  ile?: InputMaybe<Scalars['String']>;
  localite?: InputMaybe<Scalars['String']>;
  coordonnees?: InputMaybe<Scalars['String']>;
  debut?: InputMaybe<Scalars['String']>;
  fin?: InputMaybe<Scalars['String']>;
  visible?: InputMaybe<Scalars['Boolean']>;
  cover?: InputMaybe<ProjetsCoverMutation>;
};

export type SavoirfaireMutation = {
  nom?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['JSON']>;
};

export type JobsMutation = {
  titre?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['JSON']>;
};

export type EquipesAdresseMutation = {
  telephone?: InputMaybe<Scalars['String']>;
  mail?: InputMaybe<Scalars['String']>;
  postale?: InputMaybe<Scalars['String']>;
};

export type EquipesMutation = {
  nom?: InputMaybe<Scalars['String']>;
  coordonnees?: InputMaybe<Scalars['String']>;
  adresse?: InputMaybe<EquipesAdresseMutation>;
  siege?: InputMaybe<Scalars['Boolean']>;
};

export type WebsitePartsFragment = { __typename?: 'Website', name: string, subname: string, url: string, email: string, colophon?: { __typename: 'WebsiteColophon', design: string } | null, seo?: { __typename: 'WebsiteSeo', description: string } | null };

export type ProjetsPartsFragment = { __typename?: 'Projets', titre: string, maitre_ouvrage?: string | null, typologie?: string | null, mission?: string | null, statut?: string | null, etat?: string | null, surface?: number | null, ile?: string | null, localite?: string | null, coordonnees?: string | null, debut?: string | null, fin?: string | null, visible?: boolean | null, cover?: { __typename: 'ProjetsCover', src?: string | null, alt?: string | null } | null };

export type SavoirfairePartsFragment = { __typename?: 'Savoirfaire', nom: string, description?: any | null };

export type JobsPartsFragment = { __typename?: 'Jobs', titre: string, description?: any | null };

export type EquipesPartsFragment = { __typename?: 'Equipes', nom: string, coordonnees?: string | null, siege?: boolean | null, adresse?: { __typename: 'EquipesAdresse', telephone?: string | null, mail?: string | null, postale?: string | null } | null };

export type WebsiteQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type WebsiteQuery = { __typename?: 'Query', website: { __typename?: 'Website', id: string, name: string, subname: string, url: string, email: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, colophon?: { __typename: 'WebsiteColophon', design: string } | null, seo?: { __typename: 'WebsiteSeo', description: string } | null } };

export type WebsiteConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<WebsiteFilter>;
}>;


export type WebsiteConnectionQuery = { __typename?: 'Query', websiteConnection: { __typename?: 'WebsiteConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'WebsiteConnectionEdges', cursor: string, node?: { __typename?: 'Website', id: string, name: string, subname: string, url: string, email: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, colophon?: { __typename: 'WebsiteColophon', design: string } | null, seo?: { __typename: 'WebsiteSeo', description: string } | null } | null } | null> | null } };

export type ProjetsQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type ProjetsQuery = { __typename?: 'Query', projets: { __typename?: 'Projets', id: string, titre: string, maitre_ouvrage?: string | null, typologie?: string | null, mission?: string | null, statut?: string | null, etat?: string | null, surface?: number | null, ile?: string | null, localite?: string | null, coordonnees?: string | null, debut?: string | null, fin?: string | null, visible?: boolean | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, cover?: { __typename: 'ProjetsCover', src?: string | null, alt?: string | null } | null } };

export type ProjetsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<ProjetsFilter>;
}>;


export type ProjetsConnectionQuery = { __typename?: 'Query', projetsConnection: { __typename?: 'ProjetsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ProjetsConnectionEdges', cursor: string, node?: { __typename?: 'Projets', id: string, titre: string, maitre_ouvrage?: string | null, typologie?: string | null, mission?: string | null, statut?: string | null, etat?: string | null, surface?: number | null, ile?: string | null, localite?: string | null, coordonnees?: string | null, debut?: string | null, fin?: string | null, visible?: boolean | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, cover?: { __typename: 'ProjetsCover', src?: string | null, alt?: string | null } | null } | null } | null> | null } };

export type SavoirfaireQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type SavoirfaireQuery = { __typename?: 'Query', savoirfaire: { __typename?: 'Savoirfaire', id: string, nom: string, description?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type SavoirfaireConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<SavoirfaireFilter>;
}>;


export type SavoirfaireConnectionQuery = { __typename?: 'Query', savoirfaireConnection: { __typename?: 'SavoirfaireConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'SavoirfaireConnectionEdges', cursor: string, node?: { __typename?: 'Savoirfaire', id: string, nom: string, description?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type JobsQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type JobsQuery = { __typename?: 'Query', jobs: { __typename?: 'Jobs', id: string, titre: string, description?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type JobsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<JobsFilter>;
}>;


export type JobsConnectionQuery = { __typename?: 'Query', jobsConnection: { __typename?: 'JobsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'JobsConnectionEdges', cursor: string, node?: { __typename?: 'Jobs', id: string, titre: string, description?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type EquipesQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type EquipesQuery = { __typename?: 'Query', equipes: { __typename?: 'Equipes', id: string, nom: string, coordonnees?: string | null, siege?: boolean | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, adresse?: { __typename: 'EquipesAdresse', telephone?: string | null, mail?: string | null, postale?: string | null } | null } };

export type EquipesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<EquipesFilter>;
}>;


export type EquipesConnectionQuery = { __typename?: 'Query', equipesConnection: { __typename?: 'EquipesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'EquipesConnectionEdges', cursor: string, node?: { __typename?: 'Equipes', id: string, nom: string, coordonnees?: string | null, siege?: boolean | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, adresse?: { __typename: 'EquipesAdresse', telephone?: string | null, mail?: string | null, postale?: string | null } | null } | null } | null> | null } };

export const WebsitePartsFragmentDoc = gql`
    fragment WebsiteParts on Website {
  name
  subname
  colophon {
    __typename
    design
  }
  seo {
    __typename
    description
  }
  url
  email
}
    `;
export const ProjetsPartsFragmentDoc = gql`
    fragment ProjetsParts on Projets {
  titre
  maitre_ouvrage
  typologie
  mission
  statut
  etat
  surface
  ile
  localite
  coordonnees
  debut
  fin
  visible
  cover {
    __typename
    src
    alt
  }
}
    `;
export const SavoirfairePartsFragmentDoc = gql`
    fragment SavoirfaireParts on Savoirfaire {
  nom
  description
}
    `;
export const JobsPartsFragmentDoc = gql`
    fragment JobsParts on Jobs {
  titre
  description
}
    `;
export const EquipesPartsFragmentDoc = gql`
    fragment EquipesParts on Equipes {
  nom
  coordonnees
  adresse {
    __typename
    telephone
    mail
    postale
  }
  siege
}
    `;
export const WebsiteDocument = gql`
    query website($relativePath: String!) {
  website(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...WebsiteParts
  }
}
    ${WebsitePartsFragmentDoc}`;
export const WebsiteConnectionDocument = gql`
    query websiteConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: WebsiteFilter) {
  websiteConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...WebsiteParts
      }
    }
  }
}
    ${WebsitePartsFragmentDoc}`;
export const ProjetsDocument = gql`
    query projets($relativePath: String!) {
  projets(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ProjetsParts
  }
}
    ${ProjetsPartsFragmentDoc}`;
export const ProjetsConnectionDocument = gql`
    query projetsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ProjetsFilter) {
  projetsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ProjetsParts
      }
    }
  }
}
    ${ProjetsPartsFragmentDoc}`;
export const SavoirfaireDocument = gql`
    query savoirfaire($relativePath: String!) {
  savoirfaire(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...SavoirfaireParts
  }
}
    ${SavoirfairePartsFragmentDoc}`;
export const SavoirfaireConnectionDocument = gql`
    query savoirfaireConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: SavoirfaireFilter) {
  savoirfaireConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...SavoirfaireParts
      }
    }
  }
}
    ${SavoirfairePartsFragmentDoc}`;
export const JobsDocument = gql`
    query jobs($relativePath: String!) {
  jobs(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...JobsParts
  }
}
    ${JobsPartsFragmentDoc}`;
export const JobsConnectionDocument = gql`
    query jobsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: JobsFilter) {
  jobsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...JobsParts
      }
    }
  }
}
    ${JobsPartsFragmentDoc}`;
export const EquipesDocument = gql`
    query equipes($relativePath: String!) {
  equipes(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...EquipesParts
  }
}
    ${EquipesPartsFragmentDoc}`;
export const EquipesConnectionDocument = gql`
    query equipesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: EquipesFilter) {
  equipesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...EquipesParts
      }
    }
  }
}
    ${EquipesPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      website(variables: WebsiteQueryVariables, options?: C): Promise<{data: WebsiteQuery, variables: WebsiteQueryVariables, query: string}> {
        return requester<{data: WebsiteQuery, variables: WebsiteQueryVariables, query: string}, WebsiteQueryVariables>(WebsiteDocument, variables, options);
      },
    websiteConnection(variables?: WebsiteConnectionQueryVariables, options?: C): Promise<{data: WebsiteConnectionQuery, variables: WebsiteConnectionQueryVariables, query: string}> {
        return requester<{data: WebsiteConnectionQuery, variables: WebsiteConnectionQueryVariables, query: string}, WebsiteConnectionQueryVariables>(WebsiteConnectionDocument, variables, options);
      },
    projets(variables: ProjetsQueryVariables, options?: C): Promise<{data: ProjetsQuery, variables: ProjetsQueryVariables, query: string}> {
        return requester<{data: ProjetsQuery, variables: ProjetsQueryVariables, query: string}, ProjetsQueryVariables>(ProjetsDocument, variables, options);
      },
    projetsConnection(variables?: ProjetsConnectionQueryVariables, options?: C): Promise<{data: ProjetsConnectionQuery, variables: ProjetsConnectionQueryVariables, query: string}> {
        return requester<{data: ProjetsConnectionQuery, variables: ProjetsConnectionQueryVariables, query: string}, ProjetsConnectionQueryVariables>(ProjetsConnectionDocument, variables, options);
      },
    savoirfaire(variables: SavoirfaireQueryVariables, options?: C): Promise<{data: SavoirfaireQuery, variables: SavoirfaireQueryVariables, query: string}> {
        return requester<{data: SavoirfaireQuery, variables: SavoirfaireQueryVariables, query: string}, SavoirfaireQueryVariables>(SavoirfaireDocument, variables, options);
      },
    savoirfaireConnection(variables?: SavoirfaireConnectionQueryVariables, options?: C): Promise<{data: SavoirfaireConnectionQuery, variables: SavoirfaireConnectionQueryVariables, query: string}> {
        return requester<{data: SavoirfaireConnectionQuery, variables: SavoirfaireConnectionQueryVariables, query: string}, SavoirfaireConnectionQueryVariables>(SavoirfaireConnectionDocument, variables, options);
      },
    jobs(variables: JobsQueryVariables, options?: C): Promise<{data: JobsQuery, variables: JobsQueryVariables, query: string}> {
        return requester<{data: JobsQuery, variables: JobsQueryVariables, query: string}, JobsQueryVariables>(JobsDocument, variables, options);
      },
    jobsConnection(variables?: JobsConnectionQueryVariables, options?: C): Promise<{data: JobsConnectionQuery, variables: JobsConnectionQueryVariables, query: string}> {
        return requester<{data: JobsConnectionQuery, variables: JobsConnectionQueryVariables, query: string}, JobsConnectionQueryVariables>(JobsConnectionDocument, variables, options);
      },
    equipes(variables: EquipesQueryVariables, options?: C): Promise<{data: EquipesQuery, variables: EquipesQueryVariables, query: string}> {
        return requester<{data: EquipesQuery, variables: EquipesQueryVariables, query: string}, EquipesQueryVariables>(EquipesDocument, variables, options);
      },
    equipesConnection(variables?: EquipesConnectionQueryVariables, options?: C): Promise<{data: EquipesConnectionQuery, variables: EquipesConnectionQueryVariables, query: string}> {
        return requester<{data: EquipesConnectionQuery, variables: EquipesConnectionQueryVariables, query: string}, EquipesConnectionQueryVariables>(EquipesConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (client: TinaClient) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: any,
    client
  ) => Promise<any> = async (doc, vars, _options) => {
    const data = await client.request({
      query: doc,
      variables: vars,
    });

    return { data: data?.data, query: doc, variables: vars || {} };
  };

  return requester;
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(createClient({ url: "http://localhost:4001/graphql", queries }))
  );

export const queries = (client: TinaClient) => {
  const requester = generateRequester(client);
  return getSdk(requester);
};

  