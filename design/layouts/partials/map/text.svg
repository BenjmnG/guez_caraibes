{% set svgW = 600.2 %}
{% set svgH = 623.75 %}

<!-- Y axe -->
{% set lat1  =  18.91602 %}
{% set lat2  =  1.81773 %}

<!-- X axe -->
{% set long1 = -66.80300 %}
{% set long2 = -50.32910 %}

{% set siblingLimit = 0.25 %}

{% set projets = [] %}

<!-- First, we'll regroup too close entry -->
{%- for projet in collections.projets -%}
  {%- if projet.data.coordonnées -%}

    <!-- Parse string to get proper lattitude and longitude -->
    {% set lat = projet.data.coordonnées | split(',') | head(0, 1) | int %}
    {% set long = projet.data.coordonnées | split(',') | head(1, 2) | int %}

    {% set y = lat | map(lat1, lat2, 0, svgH) %}
    {% set x = long | map(long1, long2, 0, svgW) %}

    <!-- First we set an object with point coordinates -->
    {% set item = 
      { 
        id: 'pt-' + projet.data.titre | getId, 
        ty: projet.data.typologie, 
        sf: projet.data.mission, 
        lo: projet.data.ile, 
        coord: [y, x]
      }
    %}

    <!-- Now we need to find if the area arround the point is crownded or not -->
    {% set isAreaClear = true %}

    <!-- Lets parse existing point to find close relatives -->
    {%- if projet.data.ville -%}
      {%- for _projet in projets -%}

      <!-- if no matching had already been found for this project-->

        {% set i = loop.index - 1 %}

        {%- for _item in _projet.items -%}

          {%- if isAreaClear -%}

            {% set y_offset = _item.coord[0] - y %}
            {% set x_offset = _item.coord[1] - x %}

            {% if y_offset < 0 %}
              {% set y_offset = y_offset * -1 %}
            {% endif %}

            {% if x_offset < 0 %}
              {% set x_offset = x_offset * -1 %}
            {% endif %}
            

            <!-- If this point is close to already parsed point -->
            {% if y_offset < siblingLimit or x_offset < siblingLimit %}

              {% set old_entry = projets[i] %}

              <!-- Reset id if needed -->
              {% set new_id = old_entry.id %}

              {% if (old_entry.id | truncate(3, true, '') ) == 'pt-' %}
                {% set new_id = 'gp-' + (projet.data.ville | getId )%}
              {% endif %}

              <!-- set existing entry a new general Id -->
              {% set _projet = _projet | setAttribute('id', new_id) %}
              <!-- set existing entry as Parent -->
              {% set _projet = _projet | setAttribute('type', 'parent') %}
              <!-- append item to existing project -->
              {% set _projet = _projet | setAttribute('items', (old_entry.items | appendToArray(item) )) %}

              <!-- Toggle this var to end research -->
              {% set isAreaClear = false %}

            {%- endif -%} 


          {%- endif -%} 
        {%- endfor -%} 
      {%- endfor -%} 
    {%- endif -%} 
  
    <!-- If nothing was found, lets create a new first grade entry in our project list -->
    {%- if isAreaClear -%}

      {% set entry =
        {
          id: item.id,
          type: 'widow',
          ville:  projet.data.ville,
          items: [ item ]
        } 
      %} 

      {% set projets = (projets.push(entry), projets) %}
    {%- else -%}
    {%- endif -%}

  {%- endif -%}
{%- endfor -%}


<!--
0%, 0%
18.91602, -66.80300

100%, 100%
1.81773,-50.32910
--> 
{%- for projet in projets -%}
  
  {% set r = 1 %}

  {% if projet.type == "parent" %}
    <!--<g class="parent" id="{{projet.id}}">-->
  {% endif %}

  
  {%- for item in projet.items -%}

    <circle id="{{item.id}}" 
            class="pt" 
            cx="{{ item.coord[1] }}" 
            cy="{{ item.coord[0] }}" 
            data-x="{{ item.coord[1] }}"
            data-y="{{ item.coord[0] }}" 
            data-ty=" {%- for t in typologies -%}{% if item.ty == t %}{{loop.index}},{% endif %}{% endfor %}"
            data-sf="{%- for sf in collections.savoirFaire -%}{% if item.sf | isIncludes(sf.data.nom) %}{{ loop.index }},{% endif %}{% endfor %}"
            data-lo="{%- for t in collections.localisations -%}{% if item.lo == t.data.nom %}{{loop.index}},{% endif %}{% endfor %}"
            r="{{ r }}"
            transform-origin="50% 50%"
          />

    <text x="{{ item.coord[1] }}" 
          y="{{ item.coord[0] }}" 
          filter="url(#solid)">
          <tspan>.</tspan>
          {{ projet.ville }}
          <tspan>.</tspan>
    </text>

  {%- endfor -%}

  {% if projet.type == "parent" %}

    <!--<rect class="g-pt"
          x="{{projet.items[0].coord[1] - r}}" 
          y="{{projet.items[0].coord[0] - r}}"
          height="{{ r*2 }}" 
          width="{{ r*2 }}" 
          transform-origin="50% 50%"
    />-->

    <!--</g>-->
  {% endif %}

{%- endfor -%}



